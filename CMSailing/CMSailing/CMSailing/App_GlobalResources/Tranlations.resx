<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="addMember" xml:space="preserve">
    <value>Create New Member</value>
  </data>
  <data name="back" xml:space="preserve">
    <value>Back to List</value>
  </data>
  <data name="changeLanguage" xml:space="preserve">
    <value>Change Language</value>
  </data>
  <data name="city" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="comment" xml:space="preserve">
    <value>Comment</value>
  </data>
  <data name="create" xml:space="preserve">
    <value>Add New Member</value>
  </data>
  <data name="createSucess" xml:space="preserve">
    <value>New Member Added</value>
  </data>
  <data name="delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="deleteSucess" xml:space="preserve">
    <value>Delete Sucessful</value>
  </data>
  <data name="details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="editSucess" xml:space="preserve">
    <value>Member Updated</value>
  </data>
  <data name="email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="errorEmail" xml:space="preserve">
    <value>and must match email pattern. ex: foo@outlook.com</value>
  </data>
  <data name="errorMemberId" xml:space="preserve">
    <value>Member ID already in use</value>
  </data>
  <data name="errorPhone" xml:space="preserve">
    <value>Phone Number must use dash notation. ex 519-748-5220</value>
  </data>
  <data name="errorPostalCode" xml:space="preserve">
    <value>and must match canadian postal code standards. ex :N1N 2K2</value>
  </data>
  <data name="errorProvinceCode" xml:space="preserve">
    <value>Province Code is only 2 letters. ex: ON for Ontario</value>
  </data>
  <data name="errorProvinceCodeNOF" xml:space="preserve">
    <value>Province Code is not on file, please select correct province code or contact administrator for error</value>
  </data>
  <data name="errorRequired" xml:space="preserve">
    <value>{0} is required</value>
  </data>
  <data name="errorSpouseLastName" xml:space="preserve">
    <value>Cannot have a last name without first name</value>
  </data>
  <data name="firstName" xml:space="preserve">
    <value>First Name</value>
  </data>
  <data name="fullName" xml:space="preserve">
    <value>Full Name</value>
  </data>
  <data name="homePhone" xml:space="preserve">
    <value>Home Phone Number</value>
  </data>
  <data name="lastName" xml:space="preserve">
    <value>Last Name</value>
  </data>
  <data name="memberId" xml:space="preserve">
    <value>Member ID</value>
  </data>
  <data name="members" xml:space="preserve">
    <value>Members</value>
  </data>
  <data name="postalCode" xml:space="preserve">
    <value>Postal Code</value>
  </data>
  <data name="provinceCode" xml:space="preserve">
    <value>Province Code</value>
  </data>
  <data name="save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="spouseFirstName" xml:space="preserve">
    <value>Spouse First Name</value>
  </data>
  <data name="spouseLastName" xml:space="preserve">
    <value>Spouse Last Name</value>
  </data>
  <data name="street" xml:space="preserve">
    <value>Street</value>
  </data>
  <data name="submit" xml:space="preserve">
    <value>Submit</value>
  </data>
  <data name="taskExempt" xml:space="preserve">
    <value>Task Exempt</value>
  </data>
  <data name="useCanadaPost" xml:space="preserve">
    <value>Use Canada Post?</value>
  </data>
  <data name="yearJoined" xml:space="preserve">
    <value>Year Joined</value>
  </data>
  <data name="youSure" xml:space="preserve">
    <value>Are you sure you want to delete this item?</value>
  </data>
</root>